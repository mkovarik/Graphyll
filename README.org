* Graphyll

Graphyll is a static site generator. Or rather, it is a tool that static
site generators can use to be fast and efficient.

The usage is pretty simple. One writes (either manually or with a
script) a YAML file containing a list of interdependent tasks. Calling
Graphyll on such a file executes its tasks in topological order.

#+BEGIN_SRC
$ graphyll task_list.yaml
#+END_SRC

Graphyll should be used for incremental builds. This means tasks are
only executed if relevant changes have been made. This can provide
significant performance boosts for most workflows.

Enabling such incremental builds requires a cached YAML file that will
be read and (optionally) a cached YAML file that will be written. They
will usually be the same file.

#+BEGIN_SRC
$ graphyll task_list.yaml -r cache.yaml -w cache.yaml
#+END_SRC

** Tutorial: Converting Markdown

Consider a very simple blog. The posts are written in markdown (.md)
files, which must be batch converted into HTML prior to being deployed.
This can be done in a one line shell script:

#+BEGIN_SRC
kramdown src/*.md > dest/*.html
#+END_SRC

The problem with this solution is that it doesn't scale when the number
of posts is very large. Most people edit only a couple of posts before
updating their website. But running this script may invoke thousands of
unecessary conversions.

A better solution is to convert only those markdown files that have
recently been edited. The build script must therefore record the state
of the blog. Graphyll does this by calculating and storing the hash
values of each dependent file (markdown files in this example) at every
build. It compares the current hash with the previous hash to determine
if it should execute a task.

For Graphyll to accomplish this, the user must describe the build system
as a set of *nodes* that contain the following lists:

+ syscalls :: A list of system calls to execute.
+ dependencies :: A list of files/directories.
+ targets :: A list of files/directories.

In order for Graphyll to work properly, each node must specify a
deterministic process. That is to say, the targets a function of
the dependencies. If the dependencies have not been modified, running
the syscalls should not produce different targets.

These nodes are encoded in some YAML file. For the simple blog, such
a file will look like the following:

#+BEGIN_SRC
nodes:
  - syscalls: 
      - "kramdown src/post1.md > dest/post1.md"
    dependencies:
      - "src/post1.md"
    targets:
      - "src/post1.html"
  - syscalls:
      - "kramdown src/post2.md > dest/post2.md"
    dependencies:
      - "src/post2.md"
    targets:
      - "dest/post2.html"
#+END_SRC

The number of nodes is equal to the number of posts. For blogs with many
posts, writing and updating the YAML build file will be tedious. So it is
best to update it with a script.
